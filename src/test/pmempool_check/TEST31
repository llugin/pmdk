#!/usr/bin/env bash
#
# Copyright 2018-2019, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# pmempool_check/TEST31 -- test for check command with badblocks
#                          - bad blocks in the regular file
#

. ../unittest/unittest.sh

require_test_type medium
#require_fs_type non-pmem
require_build_type debug nondebug
echo 1
require_sudo_allowed
require_linked_with_ndctl $PMEMPOOL$EXESUFFIX
require_command ndctl
echo 2
setup
echo 3
. ../common_badblock.sh
echo 4
badblock_test_init
echo 5
DEVICE=$(badblock_test_get_block_device)
NAMESPACE=$(ndctl_get_namespace_of_device $DEVICE)
echo 6
FULLDEV="/dev/$DEVICE"
MOUNT_DIR=$(get_mount_dir)
echo 7
prepare_pmem $FULLDEV $MOUNT_DIR
echo 8
LOG=out${UNITTEST_NUM}.log
rm -f $LOG && touch $LOG
echo 9
POOLSET=$DIR/testset1
create_poolset $POOLSET 10M:$DIR/testfile0:z 10M:$MOUNT_DIR/testfile1:z 10M:$DIR/testfile2:z \
			R 30M:$DIR/testfile3:z
echo 10
expect_normal_exit $PMEMPOOL$EXESUFFIX rm $POOLSET
expect_normal_exit $PMEMPOOL$EXESUFFIX create obj --layout pmempool$SUFFIX $POOLSET
echo 11
turn_on_checking_bad_blocks $POOLSET
echo 12
# inject bad block:
FIRST_SECTOR=$(expect_normal_exit $EXTENTS $MOUNT_DIR/testfile1 -l 0)
echo 121
LEN=1
echo "VARS: $NAMESPACE $FIRST_SECTOR $LEN"
ndctl_inject_error $NAMESPACE $FIRST_SECTOR $LEN
echo 13
expect_bad_blocks $NAMESPACE

expect_normal_exit "$PMEMPOOL$EXESUFFIX info --bad-blocks=yes $POOLSET >> $LOG"

expect_bad_blocks $NAMESPACE

expect_abnormal_exit "$PMEMPOOL$EXESUFFIX check -v $POOLSET >> $LOG"

expect_bad_blocks $NAMESPACE

expect_normal_exit "$PMEMPOOL$EXESUFFIX info --bad-blocks=yes $POOLSET >> $LOG"

expect_bad_blocks $NAMESPACE

badblock_clear_block_device_fini $FULLDEV $NAMESPACE $FIRST_SECTOR $LEN
rm -f $FILE
badblock_test_fini $MOUNT_DIR

check

pass
